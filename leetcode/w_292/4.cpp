#include "../..//stdc++.h"


using namespace std;

class Solution {
public:
    int m;
    int n;
    // map<tuple<int, int, int>, int> dead;
    // vector<vector<vector<int>>> dead;
    int dead[101][101][101];
    bool dfs(vector<vector<char>>& grid, int r, int c, int stk) {
        if(r == m-1 && c == n-1) {
            // char ch = grid[r][c];
            // if(ch ==')')
            //     stk--;
            // else
            //     stk++;
            
            if(stk == 0)
                return true;
            else
                return false;
        }
        if(stk > m-1-r + n-1-c)
            return false;
        dead[r][c][stk] = 1;
        if(r < m-1) {
            char ch = grid[r+1][c];
            if(ch ==')' && stk > 0 && (dead[r+1][c][stk-1] == 0)) {
                if(dfs(grid, r+1, c, stk-1))
                    return true;
            }
            if(ch == '(' && (dead[r+1][c][stk+1] == 0)) {
                if(dfs(grid, r+1, c, stk+1))
                    return true;
            }
        }
        // cout << r <<":" << c+1 <<":" <<stk << endl;
        if(c < n-1 && (dead[r][c+1][stk] == 0)) {
            char ch = grid[r][c+1];
            if(ch ==')' && stk > 0 && (dead[r][c+1][stk-1] == 0)) {
                if(dfs(grid, r, c+1, stk-1))
                    return true;
            }
            if(ch == '(' && (dead[r][c+1][stk+1] == 0)) {
                if(dfs(grid, r, c+1, stk+1))
                    return true;
            }
        }
        return false;
    }
    bool hasValidPath(vector<vector<char>>& grid) {
        m = grid.size();
        n = grid[0].size();
        cout << m << ":" << n << endl;
        // dead.resize(m, vector<vector<int>>(n, vector<int>(m+n+2)));
        memset(dead, 0, sizeof(dead));
        cout << "ok" << endl;
        if(grid[0][0] == ')' || grid[m-1][n-1] == '(' || ((n+m) % 2 ==0))
            return false;
        int stk;
        if(grid[0][0] == '('){
            bool ret = dfs(grid, 0, 0, 1);
            return ret;
        } else
            return false;
    }
};

class Solution2
{
public:
    bool hasValidPath(vector<vector<char>> &grid)
    {
        int m = grid.size(), n = grid[0].size();
        if ((m + n) % 2 == 0 || grid[0][0] == ')' || grid[m - 1][n - 1] == '(')
            return false; // 剪枝
        cout <<"GHB1" << endl;
        bool vis[m][n][(m + n + 1) / 2];
        memset(vis, 0, sizeof(vis));
        function<bool(int, int, int)> dfs = [&](int x, int y, int c) -> bool
        {
            if (c > m - x + n - y - 1)
                return false; // 剪枝：即使后面都是 ')' 也不能将 c 减为 0
            if (x == m - 1 && y == n - 1)
                return c == 1; // 终点一定是 ')'
            if (vis[x][y][c])
                return false; // 重复访问
            vis[x][y][c] = true;
            c += grid[x][y] == '(' ? 1 : -1;
            return c >= 0 && (x < m - 1 && dfs(x + 1, y, c) || y < n - 1 && dfs(x, y + 1, c)); // 往下或者往右
        };
        return dfs(0, 0, 0);
    }
};
int main()
{
    vector<vector<char>> grid1 {{'(','(','('},{')','(',')'},{'(','(',')'},{'(','(',')'}};


    Solution sln;
    bool ret;
    ret = sln.hasValidPath(grid1);
    cout << ret << endl;

    vector<vector<char>> grid2 = {{')',')'},{'(','('}};
    ret = sln.hasValidPath(grid2);
    cout << ret << endl;

    vector<vector<char>> grid3 = {{'(',')',')','(','(','(','(',')',')','(',')','(',')','(','(','(','(',')','(',')','('},{'(','(',')',')','(',')',')',')','(',')','(',')','(','(',')','(','(','(','(','(',')'},{')',')','(',')',')','(','(',')','(','(',')','(',')',')','(',')',')','(','(',')',')'},{'(','(',')','(',')','(',')',')',')','(',')','(','(',')','(',')',')','(',')',')',')'},{'(','(','(',')','(','(',')','(',')',')','(',')',')',')',')',')',')','(',')','(','('},{')',')','(','(',')',')',')',')',')','(',')',')',')','(','(',')','(','(','(','(',')'},{')',')',')',')','(',')','(',')','(','(',')','(','(',')','(','(',')',')','(',')','('},{'(',')','(','(','(',')',')',')',')','(','(',')','(','(',')',')','(',')',')',')','('},{'(',')','(',')','(','(','(','(',')','(','(','(','(','(','(',')','(',')','(',')',')'},{'(',')','(','(','(',')','(',')',')',')',')','(','(','(','(',')',')','(','(','(',')'},{'(','(',')','(',')',')','(',')','(',')',')',')',')',')','(',')','(',')',')',')','('},{')','(','(','(',')','(',')',')','(',')','(',')','(','(',')','(','(',')','(','(',')'},{'(',')','(',')',')','(','(',')','(',')','(',')',')',')','(','(','(','(',')','(',')'},{'(','(',')','(',')',')','(','(','(',')','(',')','(','(',')',')','(','(','(',')',')'},{'(','(','(','(',')',')','(',')','(','(','(',')',')','(',')','(',')',')',')',')','('},{'(','(','(',')',')',')','(',')',')','(',')',')','(','(',')','(',')','(','(','(',')'},{')',')',')',')',')',')','(',')',')',')','(','(',')','(',')','(','(','(','(',')',')'}};
    ret = sln.hasValidPath(grid3);
    cout << ret << endl;

    vector<vector<char>> grid4 ={{'(','(','(','(','(',')',')','(',')',')','(',')',')','(',')','(','(',')',')','(',')','(',')',')','(',')',')',')',')','(',')','(','('},{'(',')',')','(','(',')',')',')',')','(',')','(',')','(',')','(','(',')',')','(','(','(','(',')',')',')',')',')','(','(',')','(','('},{')',')','(','(',')',')',')',')','(',')','(',')',')',')','(','(',')','(',')','(','(','(',')',')',')',')',')',')',')',')',')','(','('},{'(','(','(',')','(',')',')',')','(',')','(','(','(',')','(',')','(',')','(',')','(',')','(',')',')',')','(','(',')','(',')',')',')'},{')','(',')','(',')',')',')',')','(','(','(','(',')','(',')','(','(','(','(','(',')','(','(',')',')','(','(','(',')','(',')',')','('},{')',')',')','(',')',')',')','(','(',')',')','(','(','(','(',')','(','(',')',')','(',')',')',')','(',')',')','(',')',')','(','(','('},{')','(',')','(','(',')',')','(',')',')',')','(','(','(',')','(','(','(',')','(',')','(',')',')',')',')',')','(',')',')','(','(',')'},{'(','(',')',')','(',')',')','(','(','(','(',')','(',')','(','(','(','(','(','(',')','(',')','(',')',')','(','(','(',')','(','(',')'},{')',')','(','(',')',')','(','(','(','(','(','(','(',')',')','(','(','(',')',')','(',')','(','(',')',')','(',')',')','(',')','(','('},{')',')',')',')','(',')',')','(','(','(','(',')',')',')','(',')',')',')',')',')',')','(','(','(','(',')',')',')',')','(','(','(',')'}};

    ret = sln.hasValidPath(grid4);
    cout << ret << endl;


    vector<vector<char>> grid5 = {{'(','(',')','(',')','(','(',')','(','(',')',')',')',')',')','(',')','(','(',')','(','(',')',')',')',')',')','(','(','(','('},{')','(','(','(',')','(',')','(','(',')',')',')',')','(',')',')','(','(',')',')','(',')','(',')','(','(',')','(',')','(','('},{')',')','(','(',')','(','(',')',')',')',')','(','(',')',')','(',')','(',')',')','(','(','(',')',')',')','(',')',')','(',')'},{'(','(',')','(',')','(','(',')','(','(','(',')',')','(',')','(',')',')',')',')',')',')','(','(',')','(',')','(',')','(','('},{')',')','(',')',')','(','(','(',')',')','(',')','(',')',')',')','(','(','(',')',')','(',')','(',')',')','(','(','(','(',')'},{')',')','(','(',')','(',')','(',')','(',')','(',')',')','(',')','(',')',')','(',')','(','(','(',')','(',')',')',')','(','('},{')','(','(','(','(','(','(',')',')','(','(',')','(',')',')','(',')',')',')','(','(','(',')','(','(',')',')','(',')','(',')'},{')',')','(','(','(','(','(','(','(',')',')','(','(','(','(','(','(','(','(','(','(','(','(',')',')','(','(',')',')','(',')'},{'(',')',')',')','(','(',')',')',')',')','(',')',')','(',')',')','(','(','(','(','(','(','(',')',')','(','(',')',')','(','('},{'(','(',')','(',')',')',')',')','(','(','(',')',')',')','(',')','(','(',')','(','(','(',')','(','(','(','(','(',')',')',')'},{'(',')','(','(','(','(',')','(','(',')',')','(','(',')','(','(','(',')','(','(','(',')',')','(',')',')','(',')','(','(',')'},{')',')','(','(','(','(',')','(','(',')',')','(',')',')','(',')','(','(','(','(','(','(','(',')','(','(',')',')','(','(','('},{'(',')',')',')','(',')','(','(','(',')',')',')','(',')','(',')',')','(','(','(','(',')','(',')',')',')',')',')',')','(','('},{'(','(','(','(','(','(',')',')','(',')','(','(','(',')',')','(',')','(',')','(',')','(','(','(',')',')',')','(',')','(','('},{'(',')',')',')',')','(','(',')',')',')',')',')',')','(','(',')','(',')',')','(',')','(',')',')',')','(','(',')','(','(','('},{'(',')',')','(','(',')',')','(',')',')','(','(','(',')',')',')',')','(','(','(',')',')','(',')','(','(','(','(',')',')',')'},{')','(','(',')','(','(',')',')',')','(','(','(','(',')','(',')',')',')','(',')','(',')','(','(',')','(','(','(','(','(','('},{'(',')','(',')','(','(',')',')',')',')',')','(','(',')',')','(',')','(',')',')',')',')','(','(','(',')','(',')','(',')',')'},{'(',')','(',')',')',')','(','(','(',')','(',')','(','(',')',')','(',')','(',')','(',')','(','(','(','(','(',')','(',')','('},{')',')',')',')',')','(',')',')','(','(',')','(',')',')','(',')',')','(','(','(','(',')','(','(','(','(',')',')',')',')','('},{')','(','(','(','(','(',')','(',')',')',')',')','(','(','(',')',')','(',')',')','(','(','(','(','(','(',')',')','(','(','('},{'(','(','(',')',')','(',')','(',')',')',')',')','(',')',')',')',')','(',')','(','(','(','(',')','(','(','(','(','(','(',')'}};

    ret = sln.hasValidPath(grid5);
    cout << ret << endl;
}